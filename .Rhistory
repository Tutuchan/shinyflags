shiny::a()
library(shiny)
app <- list(
ui = bootstrapPage(
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output) {
output$plot <- renderPlot({ hist(runif(input$n)) })
}
)
runApp(app)
library(shiny)
app <- list(
ui = bootstrapPage(
includeCSS("inst/flag-icon-css/css/flag-icon.min.css"),
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output) {
output$plot <- renderPlot({ hist(runif(input$n)) })
}
)
runApp(app)
library(shiny)
app <- list(
ui = bootstrapPage(
includeCSS("inst/flag-icon-css/css/flag-icon.min.css"),
tags$span(class = "flag-icon flag-icon-fr"),
tags$span(class = "flag-icon flag-icon-fr flag-icon-squared"),
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output) {
output$plot <- renderPlot({ hist(runif(input$n)) })
}
)
runApp(app)
library(shiny)
app <- list(
ui = fluidPage(
includeCSS("inst/flag-icon-css/css/flag-icon.min.css"),
headerPanel("New Application"),
tags$span(class = "flag-icon flag-icon-fr"),
tags$span(class = "flag-icon flag-icon-fr flag-icon-squared"),
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output) {
output$plot <- renderPlot({ hist(runif(input$n)) })
}
)
runApp(app)
library(shiny)
app <- list(
ui = fluidPage(
includeCSS("inst/www/flag-icon-css/css/flag-icon.min.css"),
headerPanel("New Application"),
tags$span(class = "flag-icon flag-icon-fr"),
tags$span(class = "flag-icon flag-icon-fr flag-icon-squared"),
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output) {
output$plot <- renderPlot({ hist(runif(input$n)) })
}
)
runApp(app)
shiny::icon
debug(icon)
icon("calendar")
iconTag
iconTag
str(iconTag)
lib
htmlDependencies(iconTag)
htmlDependencies(iconTag)
country <- "fr"
flagTag <- paste0("-", country)
flagTag <- paste("flag-icon", c("", flagTag), collapse = " ")
flagTag
flagTag <- paste0("-", country)
flagTag <- paste0("flag-icon", c("", flagTag), collapse = " ")
flagTag
library(htmltools)
devtools::load_all(".")
flag("fr")
devtools::load_all(".")
devtools::load_all(".")
flag("fr")
library(shiny)
app <- list(
ui = fluidPage(
headerPanel("New Application"),
flag("fr"),
flag("us", squared = TRUE),
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output) {
output$plot <- renderPlot({ hist(runif(input$n)) })
}
)
runApp(app)
library(shinyflags)
source('inst/example.R')
country <- "fr"
flagClass <- paste0("-", country)
flagClass <- paste0("flag-icon", c("", flagClass), collapse = " ")
if (squared) {
flagClass <- paste(flagClass, "flag-icon-squared")
}
flagTag <- span(class = flagClass)
htmlDependencies(flagTag) <- htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(href = "flag-icon-css"),
stylesheet = "css/flag-icon.min.css"
)
library(htmltools)
htmlDependencies(flagTag) <- htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(href = "flag-icon-css"),
stylesheet = "css/flag-icon.min.css"
)
flagTag
str(flagTag)
library(shinyflags)
library(shiny); source('inst/example.R')
library(shinyflags)
source('inst/example.R')
library(shinyflags)
source('inst/example.R')
library(shinyflags)
source('inst/example.R')
icon("calendar")
str(icon("calendar"))
str(flag("fr"))
library(shinyflags)
source('inst/example.R')
source('inst/example.R')
runApp
shiny:::.globals$IncludeWWW
htmlDependency
library(htmltools)
htmlDependency
resolveDependencies
library(shinyflags)
library(shiny); source('inst/example.R')
library(htmltools)
<- list(htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(href = "shared/flag-icon-css"),
stylesheet = "css/flag-icon.min.css",
package = "shinyflags"
))
x <- list(htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(href = "shared/flag-icon-css"),
stylesheet = "css/flag-icon.min.css",
package = "shinyflags"
))
resolveDependencies(x)
findDependencies
findDependencies(x)
renderDependencies(x)
source('inst/example.R')
library(shinyflags)
library(shiny); source('inst/example.R')
dep <- htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(href = "shared/flag-icon-css"),
stylesheet = "css/flag-icon.min.css",
package = "shinyflags"
)
library(htmltools)
dep <- htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(href = "shared/flag-icon-css"),
stylesheet = "css/flag-icon.min.css",
package = "shinyflags"
)
createWebDependency(dep)
createWebDependency
addResourcePath
source('inst/example.R')
library(shinyflags)
a
library(shiny); source('inst/example.R')
system.file("shared/flag-icon-css/css/flag-icon.min.css", package = "shinyflags")
system.file("www/shared/flag-icon-css/css/flag-icon.min.css", package = "shinyflags")
library(shinyflags)
library(shiny); source('inst/example.R')
shiny:::runApp
shiny:::startApp
httpuv:::startServer
debug(httpuv:::startServer)
library(shiny); source('inst/example.R')
server
str(server)
app
shiny:::startApp
undebug(httpuv:::startServer)
debug(shiny:::startApp)
shiny:::startApp
library(shiny); source('inst/example.R')
appObj
appObj$options
appObj$appOptions
appObj$onStart
appObj$serverFuncSource()
appObj$httpHandler()
appObj$httpHandler
appHandlers
appHandlers$http()
appHandlers$http
undebug(shiny:::startApp)
library(shiny); source('inst/example.R')
source('inst/example.R')
source('inst/example.R')
debug(shiny:::renderPage)
source('inst/example.R')
shiny_deps
html
list.files()
connection
str(connection)
connection
?connection
isOpen(connection)
showConnections()
ls(connection)
undebug(shiny:::renderPage)
debug(shiny:::createWebDependency)
source('inst/example.R')
dependency
undebug(shiny:::createWebDependency)
dep
dep <- htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(href = "www/shared/flag-icon-css"),
stylesheet = "css/flag-icon.min.css",
package = "shinyflags"
)
library(htmltools)
dep <- htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(href = "www/shared/flag-icon-css"),
stylesheet = "css/flag-icon.min.css",
package = "shinyflags"
)
dep
?addResourcePath
createWebDependency(dep)
dep <- htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(href = "shared/flag-icon-css"),
stylesheet = "css/flag-icon.min.css",
package = "shinyflags"
)
createWebDependency(dep)
dep <- htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(file = "shared/flag-icon-css"),
stylesheet = "css/flag-icon.min.css",
package = "shinyflags"
)
createWebDependency(dep)
addResourcePath('datasets', system.file('data', package='datasets'))
addResourcePath
shiny:::.globals
shiny:::.globals$resources
library(shiny); source('inst/example.R')
source('inst/example.R')
htmlDependency
library(htmltools)
htmlDependency
resolveDependencies()
resolveDependencies
library(shinyflags)
source('inst/example.R')
debug(addResourcePath)
source('inst/example.R')
prefix
directoryPath
undebug(addResourcePath)
debug(createWebDependency)
source('inst/example.R')
dependency
dependency
dependency
dependency
dep <- htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(file = "shared/flag-icon-css"),
stylesheet = "css/flag-icon.min.css",
package = "shinyflags"
)
dep
source('inst/example.R')
dependency
dependency$pa
dependency$package
undebug(createWebDependency)
debug(processDeps)
debug(shiny:::processDeps)
source('inst/example.R')
addResourcePath
normalizePath
library(shinyflags)
source('inst/example.R')
debug(flag)
source('inst/example.R')
.gloabls
.globals
ls()
ls(all.names = TRUE)
addResourcePath
shiny:::.globals
ls(shiny:::.globals)
shiny:::.globals$resources
undebug(flag)
debug(addResourcePath)
source('inst/example.R')
prefix
undebug(addResourcePath)
debug(shiny:::renderPage)
source('inst/example.R')
deps
result$dependencies
x
result$singletons
result$html
deps
source('inst/example.R')
source('inst/example.R')
ui
x
singletonInfo
singletonInfo$ui
findDependencies(singletonInfo$ui)
deps
dep <- htmlDependency(
name = "flag-icon-css",
version = "3.0.0",
src = c(file = "flag-icon-css"),
stylesheet = "css/flag-icon.min.css",
package = "shinyflags"
)
resolveDependencies(dep)
library(shinyflags)
resolveDependencies(dep)
debug(resolveDependencies)
resolveDependencies(dep)
deps
debug(resolveDependencies)
resolveDependencies(dep)
deps
depnames <- sapply(deps, `[[`, "name")
resolveDependencies(dep)
deps[["name"]]
dependencies
resolveDependencies(list(dep))
depnames
depvers
depname <- depnames
sorted <- order(ifelse(depnames == depname, TRUE, NA),
depvers, na.last = NA, decreasing = TRUE)
sorted
dep <- deps[[sorted[[1]]]]
dep
resolveDependencies(list(dep))
resolvePackageDir
dep$package
dir
dep$src$file
system.file(dir, package = dep$package)
undebug(resolveDependencies)
source('inst/example.R')
debug(shiny:::renderPage)
source('inst/example.R')
deps
library(shinyflags)
source('inst/example.R')
debug(shiny:::renderPage)
source('inst/example.R')
findDependencies(singletonInfo$ui)
dependencies
dep$src$file
dir
dep$package
system.file(dir, package = dep$package)
system.file("www-flag-icon-css-3.0.0", package = dep$package)
system.file("www/flag-icon-css-3.0.0", package = dep$package)
library(shinyflags)
debug(shiny:::renderPage)
source('inst/example.R')
deps
deps
processDep
deps
.globals
shiny:::.globals
shiny:::.globals$resources
depHtml
source('inst/example.R')
library(shiny); source('inst/example.R')
source('inst/example.R')
source('inst/example.R')
source('inst/example.R')
source('inst/example.R')
library(shinyflags)
source('inst/example.R')
source('~/Work/github/shinyflags/R/flag.R', echo=TRUE)
library(shinyflags)
library(shiny); source('inst/example.R')
source('inst/example.R')
source('inst/example.R')
source('inst/example.R')
source('inst/example.R')
source('inst/example.R')
source('inst/example.R')
library(shinyflags)
library(shinyflags)
library(shinyflags)
library(shinyflags)
